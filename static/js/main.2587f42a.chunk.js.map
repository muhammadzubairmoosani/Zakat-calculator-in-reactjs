{"version":3,"sources":["components/sideBar/aside.js","components/index/home.js","App.js","serviceWorker.js","index.js"],"names":["sideBar","value","className","href","target","Home","props","onChange","e","setState","id","Number","total","netIncome","cashOnHand","cashInBank","goldAndSilver","calculate","state","sideBarHandle","this","onMouseOver","type","colSpan","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SA2BeA,EAxBC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACI,wBAAOC,UAAWD,EAAlB,UACI,qBAAKC,UAAU,kBAAf,SACI,2CAEJ,gCACI,kDACA,kEACA,gDACA,8DACA,mBAAGA,UAAU,oBACb,mBAAGC,KAAK,yCAAR,6CACA,6CACA,mBAAGD,UAAU,kBACb,mBAAGC,KAAK,+CAA+CC,OAAO,SAA9D,oBACA,yBAEJ,iCACI,sDClBKC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAWVC,SAAW,SAACC,GACK,iBAALA,EACF,EAAKC,SAAL,eAAiBD,EAAEJ,OAAOM,GAAKC,OAAOH,EAAEJ,OAAOH,SAC/C,EAAKQ,SAAS,CACZG,MAAO,EACPC,UAAW,EACXC,WAAY,EACZC,WAAY,EACZC,cAAe,KApBR,EAwBnBC,UAAY,WACR,MAA6D,EAAKC,MAA1DL,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,WAAYD,EAA/B,EAA+BA,WAAYE,EAA3C,EAA2CA,cAC3C,EAAKP,SAAS,CAAEG,MAAOC,EAAYE,EAAaD,EAAaE,KA1B9C,EA6BnBG,cAAgB,SAACX,GACb,EAAKC,SAAS,CAAER,MAAO,EAAKiB,MAAMjB,OAAS,EAAKiB,MAAMjB,MAAQO,KA5B9D,EAAKU,MAAQ,CACTN,MAAO,EACPC,UAAW,EACXC,WAAY,EACZC,WAAY,EACZC,cAAe,EACff,OAAO,GARI,E,0CAiCnB,WAAU,IAAD,OACL,OACI,qCACI,cAAC,EAAD,CAASA,MAAOmB,KAAKF,MAAMjB,QAC3B,mCACI,oDACA,mBAAGC,UAAU,cAAcmB,YAAa,kBAAM,EAAKF,cAAc,cAErE,qBAAKT,GAAG,iBAAiBW,YAAa,kBAAM,EAAKF,iBAAjD,SACI,sBAAKT,GAAG,YAAR,UACI,sBAAKR,UAAU,YAAf,UACI,0CACA,4BAAIkB,KAAKF,MAAMN,MAAQ,QAE3B,gCACI,2DAC4B,gCAAQQ,KAAKF,MAAMN,WAE/C,gCACI,kCACI,+BACI,uCAAS,uBAAT,uCACA,6BACI,2CAGR,+BACI,4CAAc,uBAAd,yBACA,6BAAI,uBAAOU,KAAK,OAAOZ,GAAG,YAAYT,MAAOmB,KAAKF,MAAML,UAAWN,SAAU,SAACC,GAAD,OAAO,EAAKD,SAASC,WAEtG,+BACI,8CACA,6BAAI,uBAAOc,KAAK,OAAOZ,GAAG,aAAaT,MAAOmB,KAAKF,MAAMJ,WAAYP,SAAU,SAACC,GAAD,OAAO,EAAKD,SAASC,WAExG,+BACI,+CACA,6BAAI,uBAAOc,KAAK,OAAOZ,GAAG,aAAaT,MAAOmB,KAAKF,MAAMH,WAAYR,SAAU,SAACC,GAAD,OAAO,EAAKD,SAASC,WAExG,+BACI,iDACA,6BAAI,uBAAOc,KAAK,OAAOZ,GAAG,gBAAgBT,MAAOmB,KAAKF,MAAMF,cAAeT,SAAU,SAACC,GAAD,OAAO,EAAKD,SAASC,WAE9G,6BACI,qBAAIe,QAAQ,IAAZ,UACI,wBAAQC,QAAS,kBAAM,EAAKP,aAA5B,uBACA,wBAAQO,QAAS,kBAAM,EAAKjB,SAAS,iBAArC,4C,GA/EVkB,IAAMC,WCDnBC,E,4JACnB,WACE,OACE,qBAAKzB,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJyBuB,IAAMC,WCSnBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2587f42a.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css'\n\nconst sideBar = ({ value }) => {\n    return (\n        <aside className={value}>\n            <div className='nestedContainer'>\n                <span>About</span>\n            </div>\n            <div>\n                <h2>Zakat Calculator</h2>\n                <p>A simple web-app calculate zakat.</p>\n                <h2>Developer Info</h2>\n                <p>Name: Muhammad Zubair Moosani</p>\n                <i className=\"far fa-envelope\"></i>\n                <a href=\"mailto:muhammadzubairmoosani@gmail.com\">muhammadzubairmoosani@gmail.com</a>\n                <h3>Visit Link:</h3>\n                <i className=\"fab fa-github\"></i>\n                <a href=\"https://www.github.com/muhammadzubairmoosani\" target=\"_blank\">GitHub</a>\n                <p></p>\n            </div>\n            <footer>\n                <span>W3C Validate</span>\n            </footer>\n        </aside>\n    );\n}\nexport default sideBar;","import React from 'react';\nimport './style.css'\nimport Sidebar from '../sideBar/aside'\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            total: 0,\n            netIncome: 0,\n            cashOnHand: 0,\n            cashInBank: 0,\n            goldAndSilver: 0,\n            value: false\n        }\n    }\n    \n    onChange = (e) => {\n        (typeof e == 'object')\n            ? this.setState({ [e.target.id]: Number(e.target.value) })\n            : this.setState({\n                total: 0,\n                netIncome: 0,\n                cashOnHand: 0,\n                cashInBank: 0,\n                goldAndSilver: 0,\n            })\n    }\n\n    calculate = () => {\n        const { netIncome, cashInBank, cashOnHand, goldAndSilver } = this.state;\n        this.setState({ total: netIncome + cashInBank + cashOnHand + goldAndSilver })\n    }\n\n    sideBarHandle = (e) => {\n        this.setState({ value: this.state.value ? !this.state.value : e })\n    }\n\n    render() {\n        return (\n            <>\n                <Sidebar value={this.state.value} />\n                <header>\n                    <span>Zakat Calculator</span>\n                    <i className=\"fas fa-bars\" onMouseOver={() => this.sideBarHandle('show')}></i>\n                </header>\n                <div id=\"main-container\" onMouseOver={() => this.sideBarHandle()}>\n                    <div id=\"container\">\n                        <div className=\"resultDiv\">\n                            <p>Zakat due</p>\n                            <p>{this.state.total / 40}</p>\n                        </div>\n                        <div>\n                            <div>\n                                Total subject to Zakat: <label>{this.state.total}</label>\n                            </div>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td>Nisab<br />(Price of 85G (3oz) of pure gold)</td>\n                                        <td>\n                                            <p>12335</p>\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>Net Income<br />(e.g Annual salary)</td>\n                                        <td><input type=\"text\" id=\"netIncome\" value={this.state.netIncome} onChange={(e) => this.onChange(e)} /></td>\n                                    </tr>\n                                    <tr>\n                                        <td>Cash on hand</td>\n                                        <td><input type=\"text\" id=\"cashOnHand\" value={this.state.cashOnHand} onChange={(e) => this.onChange(e)} /></td>\n                                    </tr>\n                                    <tr>\n                                        <td>Cash in banks</td>\n                                        <td><input type=\"text\" id=\"cashInBank\" value={this.state.cashInBank} onChange={(e) => this.onChange(e)} /></td>\n                                    </tr>\n                                    <tr>\n                                        <td>Gold and silver</td>\n                                        <td><input type=\"text\" id=\"goldAndSilver\" value={this.state.goldAndSilver} onChange={(e) => this.onChange(e)} /></td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan=\"2\">\n                                            <button onClick={() => this.calculate()}>Calculate</button>\n                                            <button onClick={() => this.onChange('clear fields')}>Reset</button>\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}","import React from 'react';\nimport Home from './components/index/home';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif(module.hot) {\n    module.hot.accept()\n}"],"sourceRoot":""}